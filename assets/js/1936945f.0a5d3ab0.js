"use strict";(self.webpackChunkkunai_doc=self.webpackChunkkunai_doc||[]).push([[7837],{3905:(e,n,t)=>{t.d(n,{Zo:()=>d,kt:()=>v});var r=t(7294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function c(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var s=r.createContext({}),l=function(e){var n=r.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},d=function(e){var n=l(e.components);return r.createElement(s.Provider,{value:n},e.children)},p="mdxType",f={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},u=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,o=e.originalType,s=e.parentName,d=c(e,["components","mdxType","originalType","parentName"]),p=l(t),u=a,v=p["".concat(s,".").concat(u)]||p[u]||f[u]||o;return t?r.createElement(v,i(i({ref:n},d),{},{components:t})):r.createElement(v,i({ref:n},d))}));function v(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var o=t.length,i=new Array(o);i[0]=u;var c={};for(var s in n)hasOwnProperty.call(n,s)&&(c[s]=n[s]);c.originalType=e,c[p]="string"==typeof e?e:a,i[1]=c;for(var l=2;l<o;l++)i[l]=t[l];return r.createElement.apply(null,i)}return r.createElement.apply(null,t)}u.displayName="MDXCreateElement"},2614:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>s,contentTitle:()=>i,default:()=>f,frontMatter:()=>o,metadata:()=>c,toc:()=>l});var r=t(7462),a=(t(7294),t(3905));const o={sidebar_position:1},i="Execve",c={unversionedId:"events/execve",id:"version-0.1.0/events/execve",title:"Execve",description:"Execve events are generated whenever an execve syscall happens on the system. It provides information about the current binary currently running.",source:"@site/versioned_docs/version-0.1.0/events/execve.md",sourceDirName:"events",slug:"/events/execve",permalink:"/docs/0.1.0/events/execve",draft:!1,editUrl:"https://github.com/kunai-project/kunai-doc/tree/main/versioned_docs/version-0.1.0/events/execve.md",tags:[],version:"0.1.0",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"tutorialSidebar",previous:{title:"Event Layout and Info Section",permalink:"/docs/0.1.0/events/generalities"},next:{title:"Execve script",permalink:"/docs/0.1.0/events/execve_script"}},s={},l=[],d={toc:l},p="wrapper";function f(e){let{components:n,...t}=e;return(0,a.kt)(p,(0,r.Z)({},d,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"execve"},"Execve"),(0,a.kt)("p",null,"Execve events are generated whenever an ",(0,a.kt)("inlineCode",{parentName:"p"},"execve")," syscall happens on the system. It provides information about the current binary currently running."),(0,a.kt)("admonition",{type:"tip"},(0,a.kt)("p",{parentName:"admonition"},"This event gets generated only when ",(0,a.kt)("inlineCode",{parentName:"p"},"execve")," syscall is successful")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "data": {\n    // list of ancestors of that task (| separated)\n    "ancestors": "/usr/lib/systemd/systemd|/snap/lxd/24061/bin/lxd|/snap/lxd/\n    24061/bin/lxd",\n    // parent binary\n    "parent_exe": "/snap/lxd/24061/bin/lxd",\n    // command line\n    "command_line": "/bin/systemd-tmpfiles --create --remove --boot --exclude-prefix=/dev",\n    // information related to the current executable of the task\n    // if the event happen in a container all information is\n    // relative to the container\n    "exe": {\n      // file on disk\n      "file": "/bin/systemd-tmpfiles",\n      // metadata of the file\n      "md5": "c4c46154ce57c0a18b6a080df30e51ef",\n      "sha1": "c90ddb71b76dd32fefb5285edc19b06ead09a148",\n      "sha256": "39546d8fcf1cc7f0f0a6fa058174b04a748305c3fdc17574476e74f11ede4577",\n      "sha512": "c31d7fe7443004ace75fb86eaf0cd73dccb38a732f6b9f42246785549b6da810eae3bb91ab04d84eb42e30e1b9edad0f36d4c9fe49154beb6d4a3ef8b23fbb54",\n      "size": 71752\n    }\n  },\n  "info": {\n    ...\n    "event": {\n        ...\n        "id": 1,\n        "name": "execve",\n        ...\n    },\n    ...\n  }\n}\n')))}f.isMDXComponent=!0}}]);