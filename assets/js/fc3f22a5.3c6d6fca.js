"use strict";(self.webpackChunkkunai_doc=self.webpackChunkkunai_doc||[]).push([[1912],{3905:(e,t,a)=>{a.d(t,{Zo:()=>c,kt:()=>m});var n=a(7294);function i(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function r(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function o(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?r(Object(a),!0).forEach((function(t){i(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):r(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function s(e,t){if(null==e)return{};var a,n,i=function(e,t){if(null==e)return{};var a,n,i={},r=Object.keys(e);for(n=0;n<r.length;n++)a=r[n],t.indexOf(a)>=0||(i[a]=e[a]);return i}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(n=0;n<r.length;n++)a=r[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(i[a]=e[a])}return i}var l=n.createContext({}),d=function(e){var t=n.useContext(l),a=t;return e&&(a="function"==typeof e?e(t):o(o({},t),e)),a},c=function(e){var t=d(e.components);return n.createElement(l.Provider,{value:t},e.children)},p="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},h=n.forwardRef((function(e,t){var a=e.components,i=e.mdxType,r=e.originalType,l=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),p=d(a),h=i,m=p["".concat(l,".").concat(h)]||p[h]||u[h]||r;return a?n.createElement(m,o(o({ref:t},c),{},{components:a})):n.createElement(m,o({ref:t},c))}));function m(e,t){var a=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var r=a.length,o=new Array(r);o[0]=h;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[p]="string"==typeof e?e:i,o[1]=s;for(var d=2;d<r;d++)o[d]=a[d];return n.createElement.apply(null,o)}return n.createElement.apply(null,a)}h.displayName="MDXCreateElement"},1380:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>l,contentTitle:()=>o,default:()=>u,frontMatter:()=>r,metadata:()=>s,toc:()=>d});var n=a(7462),i=(a(7294),a(3905));const r={sidebar_position:1},o="Execve",s={unversionedId:"events/execve",id:"version-0.6.0/events/execve",title:"Execve",description:"This event is generated when a new process is created using one of the execve system calls. execve system calls are used to execute a program within the context of an existing process, replacing the current process image with a new one. This event is crucial for monitoring process execution and understanding the lineage and behavior of processes on a Linux system.",source:"@site/versioned_docs/version-0.6.0/events/execve.md",sourceDirName:"events",slug:"/events/execve",permalink:"/docs/0.6.0/events/execve",draft:!1,editUrl:"https://github.com/kunai-project/kunai-doc/tree/main/versioned_docs/version-0.6.0/events/execve.md",tags:[],version:"0.6.0",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"tutorialSidebar",previous:{title:"Start",permalink:"/docs/0.6.0/events/start"},next:{title:"Execve Script",permalink:"/docs/0.6.0/events/execve_script"}},l={},d=[{value:"Example JSON",id:"example-json",level:2},{value:"Additional Details",id:"additional-details",level:2},{value:"Why This Event Matters",id:"why-this-event-matters",level:3},{value:"Key Fields Explained",id:"key-fields-explained",level:3},{value:"<code>.data.ancestors</code>",id:"dataancestors",level:4},{value:"<code>.data.parent_command_line</code>",id:"dataparent_command_line",level:4},{value:"<code>.data.parent_exe</code>",id:"dataparent_exe",level:4},{value:"<code>.data.command_line</code>",id:"datacommand_line",level:4},{value:"<code>.data.exe.path</code>",id:"dataexepath",level:4},{value:"<code>.data.exe.md5</code>",id:"dataexemd5",level:4},{value:"<code>.data.exe.sha1</code>",id:"dataexesha1",level:4},{value:"<code>.data.exe.sha256</code>",id:"dataexesha256",level:4},{value:"<code>.data.exe.sha512</code>",id:"dataexesha512",level:4},{value:"<code>.data.exe.size</code>",id:"dataexesize",level:4},{value:"<code>.data.exe.error</code>",id:"dataexeerror",level:4}],c={toc:d},p="wrapper";function u(e){let{components:t,...a}=e;return(0,i.kt)(p,(0,n.Z)({},c,a,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"execve"},"Execve"),(0,i.kt)("p",null,"This event is generated when a new process is created using one of the ",(0,i.kt)("inlineCode",{parentName:"p"},"execve")," system calls. ",(0,i.kt)("inlineCode",{parentName:"p"},"execve")," system calls are used to execute a program within the context of an existing process, replacing the current process image with a new one. This event is crucial for monitoring process execution and understanding the lineage and behavior of processes on a Linux system."),(0,i.kt)("h2",{id:"example-json"},"Example JSON"),(0,i.kt)("p",null,"Below is a sample JSON payload for an ",(0,i.kt)("inlineCode",{parentName:"p"},"execve")," event:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "data": {\n    "ancestors": "/usr/lib/systemd/systemd|/usr/bin/login|/usr/bin/zsh|/usr/bin/bash|/usr/bin/xinit|/usr/bin/i3|/usr/bin/bash|/usr/bin/urxvt|/usr/bin/zsh|/usr/bin/bash|/usr/bin/timeout|/usr/bin/bash",\n    "parent_command_line": "bash -ec \\"trash=/tmp/trash; mkdir -p $trash; while [ true ]; do t=$(mktemp -d -p $trash); for i in {0..100000}; do echo \\\\\\"AHHHH\\\\\\" > $t/test$i.txt; done && rm -rf $t; done\\"",\n    "parent_exe": "/usr/bin/bash",\n    "command_line": "mktemp -d -p /tmp/trash",\n    "exe": {\n      "path": "/usr/bin/mktemp",\n      "md5": "0d7660dac3bffd6b76d3054da0fa1216",\n      "sha1": "817329148a765bc2dc82baa230638d1987d7a284",\n      "sha256": "f32938cf25ddd6f6800a8e9b406595534d0eb27993587bbdeee2e83dd97d8406",\n      "sha512": "22d716d4e16492928ec90380d8c6d4749a0082ffa04630355a1d9a59bd3d196e83169223354a1edd28c5bbec137da96ccc6f42558e30cfe2a4d456a0b4c50fba",\n      "size": 39144,\n      "error": null\n    }\n  },\n  "info": {\n    "host": "...",\n    "event": {\n      "source": "kunai",\n      "id": 1,\n      "name": "execve",\n      "uuid": "b8e4bb6c-6048-b9e9-6c50-514888182958",\n      "batch": 922\n    },\n    "task": "...",\n    "parent_task": "...",\n    "utc_time": "2025-06-10T14:00:42.814301638Z"\n  }\n}\n')),(0,i.kt)("h2",{id:"additional-details"},"Additional Details"),(0,i.kt)("h3",{id:"why-this-event-matters"},"Why This Event Matters"),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"execve")," event is significant for several reasons:"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("strong",{parentName:"li"},"Process Monitoring"),": It provides visibility into process creation and execution, which is essential for security monitoring and incident response."),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("strong",{parentName:"li"},"Behavioral Analysis"),": Understanding the lineage and command-line arguments of processes helps in analyzing system behavior and detecting anomalies."),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("strong",{parentName:"li"},"Security"),": Monitoring ",(0,i.kt)("inlineCode",{parentName:"li"},"execve")," events can help detect unauthorized or malicious process executions, which is critical for maintaining system security.")),(0,i.kt)("h3",{id:"key-fields-explained"},"Key Fields Explained"),(0,i.kt)("h4",{id:"dataancestors"},(0,i.kt)("inlineCode",{parentName:"h4"},".data.ancestors")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"A pipe-separated list of the executable paths of the process ancestors.")),(0,i.kt)("h4",{id:"dataparent_command_line"},(0,i.kt)("inlineCode",{parentName:"h4"},".data.parent_command_line")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"The command line used to start the parent process.")),(0,i.kt)("h4",{id:"dataparent_exe"},(0,i.kt)("inlineCode",{parentName:"h4"},".data.parent_exe")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"The path to the executable of the parent process.")),(0,i.kt)("h4",{id:"datacommand_line"},(0,i.kt)("inlineCode",{parentName:"h4"},".data.command_line")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"The command line used to start the current process.")),(0,i.kt)("h4",{id:"dataexepath"},(0,i.kt)("inlineCode",{parentName:"h4"},".data.exe.path")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"The path to the executable being run.")),(0,i.kt)("h4",{id:"dataexemd5"},(0,i.kt)("inlineCode",{parentName:"h4"},".data.exe.md5")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"The MD5 hash of the executable file.")),(0,i.kt)("h4",{id:"dataexesha1"},(0,i.kt)("inlineCode",{parentName:"h4"},".data.exe.sha1")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"The SHA1 hash of the executable file.")),(0,i.kt)("h4",{id:"dataexesha256"},(0,i.kt)("inlineCode",{parentName:"h4"},".data.exe.sha256")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"The SHA256 hash of the executable file.")),(0,i.kt)("h4",{id:"dataexesha512"},(0,i.kt)("inlineCode",{parentName:"h4"},".data.exe.sha512")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"The SHA512 hash of the executable file.")),(0,i.kt)("h4",{id:"dataexesize"},(0,i.kt)("inlineCode",{parentName:"h4"},".data.exe.size")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"The size of the executable file in bytes.")),(0,i.kt)("h4",{id:"dataexeerror"},(0,i.kt)("inlineCode",{parentName:"h4"},".data.exe.error")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Any error associated with the executable file, if applicable.")),(0,i.kt)("admonition",{type:"tip"},(0,i.kt)("p",{parentName:"admonition"},"The ",(0,i.kt)("inlineCode",{parentName:"p"},"ancestors")," field provides a complete lineage of the process, which can be crucial for tracing the origin and understanding the context of process execution.")))}u.isMDXComponent=!0}}]);